/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatarWEB.glb -o src/components/Avatar2.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function TestModel({
  position,
  scale,
  playAudio,
  count,
  audioFile,
  jsonDoc,
  sounda
}) {
  const { scene } = useGLTF("/models/avatarWEB.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { animations: idle2Animation } = useFBX("/animations/idle2.fbx");
  const { animations: idle3Animation } = useFBX("/animations/idle3.fbx");
  const { animations: standingIdleAnimation } = useFBX(
    "/animations/Standing Idle.fbx"
  );
  const { animations: offensiveAnimation } = useFBX(
    "/animations/OffensiveIdle.fbx"
  );
  const { animations: hi1 } = useFBX("/newAnimations/hi1.fbx");
  const { animations: angry } = useFBX("/newAnimations/angry.fbx");
  const { animations: angry2 } = useFBX("/newAnimations/angry2.fbx");
  const { animations: idle2 } = useFBX("/newAnimations/idle2.fbx");
  const { animations: idle3 } = useFBX("/newAnimations/idle3.fbx");
  const { animations: look } = useFBX("/newAnimations/look.fbx");
  const { animations: looking2 } = useFBX("/newAnimations/looking2.fbx");
  const { animations: talk } = useFBX("/newAnimations/talk.fbx");
  const { animations: walksayHi } = useFBX("/newAnimations/walksayHi.fbx");

  hi1[0].name = "hi1";
  angry[0].name = "angry";
  angry2[0].name = "angry2";
  idle2[0].name = "idle2";
  idle3[0].name = "idle3";
  look[0].name = "look";
  looking2[0].name = "looking2";
  talk[0].name = "talk";
  walksayHi[0].name = "walksayHi";

  const [animation, setAnimation] = useState("idle2");
  const group = useRef();
  const headFollow = true;
  const smoothMorphTarget = true;
  const morphTargetSmoothing = 0.5;

  const audio = useMemo(
    () => new Audio("data:audio/mp3;base64," + audioFile),
    [count]
  );

  useFrame(() => {
    if (audio.paused || audio.ended) {
      setAnimation("idle3");
      return;
    }
  });

  useEffect(() => {
    // nodes.Wolf3D_Head.morphTargetInfluences[
    //   nodes.Wolf3D_Head.morphTargetDictionary["viseme_I"]
    // ] = 1;
    // nodes.Wolf3D_Teeth.morphTargetInfluences[
    //   nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_I"]
    // ] = 1;
    if (playAudio) {
      audio.play();
      setAnimation("hi1");
    } else {
      setAnimation("idle3");
      audio.pause();
    }
  }, [playAudio, count]);

  //  useFrame(() => {
  //     const currentAudioTime = audio.currentTime;

  //     if (audio.paused || audio.ended) {
  //       setAnimation("Idle");
  //       return;
  //     }

  //     Object.values(corresponding).forEach((value) => {
  //       if (!smoothMorphTarget) {
  //         nodes.Wolf3D_Head.morphTargetInfluences[
  //           nodes.Wolf3D_Head.morphTargetDictionary[value]
  //         ] = 0;
  //         nodes.Wolf3D_Teeth.morphTargetInfluences[
  //           nodes.Wolf3D_Teeth.morphTargetDictionary[value]
  //         ] = 0;
  //       } else {
  //         nodes.Wolf3D_Head.morphTargetInfluences[
  //           nodes.Wolf3D_Head.morphTargetDictionary[value]
  //         ] = THREE.MathUtils.lerp(
  //           nodes.Wolf3D_Head.morphTargetInfluences[
  //             nodes.Wolf3D_Head.morphTargetDictionary[value]
  //           ],
  //           0,
  //           morphTargetSmoothing
  //         );

  //         nodes.Wolf3D_Teeth.morphTargetInfluences[
  //           nodes.Wolf3D_Teeth.morphTargetDictionary[value]
  //         ] = THREE.MathUtils.lerp(
  //           nodes.Wolf3D_Teeth.morphTargetInfluences[
  //             nodes.Wolf3D_Teeth.morphTargetDictionary[value]
  //           ],
  //           0,
  //           morphTargetSmoothing
  //         );
  //       }
  //     });

  //     // if(jsonDoc){
  //     //   for (let i = 0; i < jsonDoc.mouthCues.length; i++) {
  //     //     const mouthCue = jsonDoc.mouthCues[i];
  //     //     if (
  //     //       currentAudioTime >= mouthCue.start &&
  //     //       currentAudioTime <= mouthCue.end
  //     //     ) {
  //     //       if (!smoothMorphTarget) {
  //     //         nodes.Wolf3D_Head.morphTargetInfluences[
  //     //           nodes.Wolf3D_Head.morphTargetDictionary[
  //     //             corresponding[mouthCue.value]
  //     //           ]
  //     //         ] = 1;
  //     //         nodes.Wolf3D_Teeth.morphTargetInfluences[
  //     //           nodes.Wolf3D_Teeth.morphTargetDictionary[
  //     //             corresponding[mouthCue.value]
  //     //           ]
  //     //         ] = 1;
  //     //       } else {
  //     //         nodes.Wolf3D_Head.morphTargetInfluences[
  //     //           nodes.Wolf3D_Head.morphTargetDictionary[
  //     //             corresponding[mouthCue.value]
  //     //           ]
  //     //         ] = THREE.MathUtils.lerp(
  //     //           nodes.Wolf3D_Head.morphTargetInfluences[
  //     //             nodes.Wolf3D_Head.morphTargetDictionary[
  //     //               corresponding[mouthCue.value]
  //     //             ]
  //     //           ],
  //     //           1,
  //     //           morphTargetSmoothing
  //     //         );
  //     //         nodes.Wolf3D_Teeth.morphTargetInfluences[
  //     //           nodes.Wolf3D_Teeth.morphTargetDictionary[
  //     //             corresponding[mouthCue.value]
  //     //           ]
  //     //         ] = THREE.MathUtils.lerp(
  //     //           nodes.Wolf3D_Teeth.morphTargetInfluences[
  //     //             nodes.Wolf3D_Teeth.morphTargetDictionary[
  //     //               corresponding[mouthCue.value]
  //     //             ]
  //     //           ],
  //     //           1,
  //     //           morphTargetSmoothing
  //     //         );
  //     //       }

  //     //       break;
  //     //     }
  //     //   }
  //     // }
  //   });

  const { actions } = useAnimations(
    [
      hi1[0],
      angry[0],
      angry2[0],
      idle2[0],
      idle3[0],
      look[0],
      looking2[0],
      talk[0],
      walksayHi[0],
    ],

    group
  );

  useEffect(() => {
    if (actions[animation]) {
      actions[animation].reset().fadeIn(0.5).play();
    } else {
      console.warn(`Animation "${animation}" not found in actions.`);
    }

    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation]);

  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
  });

  console.log(nodes.Mesh);

  return (
    <group
      position={position}
      scale={scale}
      dispose={null}
      ref={group}
      rotation={[-1.5, 0, 0]}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.eyeleft.geometry}
        material={materials.Std_Cornea_L1}
        skeleton={nodes.eyeleft.skeleton}
      />
      <skinnedMesh
        geometry={nodes.eyeright.geometry}
        material={materials.Std_Cornea_L1}
        skeleton={nodes.eyeright.skeleton}
      />
      <skinnedMesh
        geometry={nodes.gloveL.geometry}
        material={materials.spymask1}
        skeleton={nodes.gloveL.skeleton}
      />
      <skinnedMesh
        geometry={nodes.gloveR.geometry}
        material={materials.spymask1}
        skeleton={nodes.gloveR.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Jacket.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Jacket.skeleton}
      />
      <skinnedMesh
        geometry={nodes.mask1.geometry}
        material={materials["mask:spymask1"]}
        skeleton={nodes.mask1.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Pants.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Pants.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shirt.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shirt.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shoe_Left.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shoe_Left.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shoe_Right.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shoe_Right.skeleton}
      />
      <skinnedMesh
        geometry={nodes.shoulderL.geometry}
        material={materials.spymask1}
        skeleton={nodes.shoulderL.skeleton}
      />
      <skinnedMesh
        geometry={nodes.shoulderR.geometry}
        material={materials.spymask1}
        skeleton={nodes.shoulderR.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh008.geometry}
        material={materials.black}
        skeleton={nodes.Mesh008.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh008_1.geometry}
        material={materials.blueglow}
        skeleton={nodes.Mesh008_1.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh.geometry}
        material={materials.Ga_Skin_Head}
        skeleton={nodes.Mesh.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh_1.geometry}
        material={materials.Ga_Skin_Body1}
        skeleton={nodes.Mesh_1.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/avatarWEB.glb");
