/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatarWEB.glb -o src/components/Avatar2.jsx -r public 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function TestModel(props) {
  const { scene } = useGLTF("/models/avatarWEB.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { animations: idle2Animation } = useFBX("/animations/idle2.fbx");
  const { animations: idle3Animation } = useFBX("/animations/idle3.fbx");
  const { animations: standingIdleAnimation } = useFBX("/animations/Standing Idle.fbx");
  const { animations: offensiveAnimation } = useFBX("/animations/OffensiveIdle.fbx");

  idle2Animation[0].name = "idle2";
  idle3Animation[0].name = "idle3";
  standingIdleAnimation[0].name = "StandingIdle";
  offensiveAnimation[0].name = "Offensive";

  const [animation, setAnimation] = useState("StandingIdle");
  const group = useRef();

  const { actions } = useAnimations(
    [idle2Animation[0], idle3Animation[0], standingIdleAnimation[0], offensiveAnimation[0]],
    group
  );

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();

    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  return (
    <group {...props} dispose={null} ref={group} rotation={[-1.5, 0, 0]}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.eyeleft.geometry}
        material={materials.Std_Cornea_L1}
        skeleton={nodes.eyeleft.skeleton}
      />
      <skinnedMesh
        geometry={nodes.eyeright.geometry}
        material={materials.Std_Cornea_L1}
        skeleton={nodes.eyeright.skeleton}
      />
      <skinnedMesh
        geometry={nodes.gloveL.geometry}
        material={materials.spymask1}
        skeleton={nodes.gloveL.skeleton}
      />
      <skinnedMesh
        geometry={nodes.gloveR.geometry}
        material={materials.spymask1}
        skeleton={nodes.gloveR.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Jacket.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Jacket.skeleton}
      />
      <skinnedMesh
        geometry={nodes.mask1.geometry}
        material={materials["mask:spymask1"]}
        skeleton={nodes.mask1.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Pants.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Pants.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shirt.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shirt.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shoe_Left.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shoe_Left.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Shoe_Right.geometry}
        material={materials.futureClothes}
        skeleton={nodes.Shoe_Right.skeleton}
      />
      <skinnedMesh
        geometry={nodes.shoulderL.geometry}
        material={materials.spymask1}
        skeleton={nodes.shoulderL.skeleton}
      />
      <skinnedMesh
        geometry={nodes.shoulderR.geometry}
        material={materials.spymask1}
        skeleton={nodes.shoulderR.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh008.geometry}
        material={materials.black}
        skeleton={nodes.Mesh008.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh008_1.geometry}
        material={materials.blueglow}
        skeleton={nodes.Mesh008_1.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh.geometry}
        material={materials.Ga_Skin_Head}
        skeleton={nodes.Mesh.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Mesh_1.geometry}
        material={materials.Ga_Skin_Body1}
        skeleton={nodes.Mesh_1.skeleton}
      />
    </group>
  );
}

useGLTF.preload("/models/avatarWEB.glb");
